// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract TiffyAI {
    string public name = "TiffyAI";
    string public symbol = "TIFFY";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    address public owner;
    address public bestowedBlessingsWallet;
    address public liquidityWallet;
    address public rewardsWallet;
    address public treasuryWallet;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    mapping(address => bool) public isGameContract;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event GameContractAdded(address indexed gameContract);
    event GameContractRemoved(address indexed gameContract);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    modifier onlyGame() {
        require(isGameContract[msg.sender], "Not authorized game");
        _;
    }

    constructor() {
        name = "TiffyAI";
        symbol = "TIFFY";
        owner = msg.sender;

        // Set initial wallets (you can call setter functions later if needed)
        bestowedBlessingsWallet = 0x8e8f465cC81b87efE6C58Efb1A03Ff10c32bBf2d;
        liquidityWallet = 0x6a28ae01Ad12bC73D0c70E88D23CeEd6d6382D19;
        rewardsWallet = 0xF27d595F962ed722F39889B23682B39F712B4Da8;
        treasuryWallet = 0xed9b43bED20B063ae0966C0AEC446bc755fB84bA;

        _mint(owner, 10_000_000 * 10 ** decimals); // 10 million TIFFY
    }

    function transfer(address to, uint256 amount) public returns (bool) {
        _transfer(msg.sender, to, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        allowance[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address from, address to, uint256 amount) public returns (bool) {
        require(allowance[from][msg.sender] >= amount, "Allowance exceeded");
        allowance[from][msg.sender] -= amount;
        _transfer(from, to, amount);
        return true;
    }

    function _transfer(address from, address to, uint256 amount) internal {
        require(balanceOf[from] >= amount, "Insufficient balance");
        balanceOf[from] -= amount;
        balanceOf[to] += amount;
        emit Transfer(from, to, amount);
    }

    function _mint(address to, uint256 amount) internal {
        totalSupply += amount;
        balanceOf[to] += amount;
        emit Transfer(address(0), to, amount);
    }

    // Whitelisted game reward transfers
    function gameRewardTransfer(address to, uint256 amount) external onlyGame {
        _transfer(rewardsWallet, to, amount);
    }

    function addGameContract(address gameAddr) external onlyOwner {
        isGameContract[gameAddr] = true;
        emit GameContractAdded(gameAddr);
    }

    function removeGameContract(address gameAddr) external onlyOwner {
        isGameContract[gameAddr] = false;
        emit GameContractRemoved(gameAddr);
    }

    // Emergency dev wallet recovery
    function emergencyWithdraw() external onlyOwner {
        _transfer(address(this), owner, balanceOf[address(this)]);
    }
}
