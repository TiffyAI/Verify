// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract TiffyAI {
    string public name = "TiffyAI";
    string public symbol = "TIFFY";
    uint8 public decimals = 18;
    uint256 public totalSupply = 10_000_000 * 10 ** uint256(decimals);

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    address public owner;
    address public bestowedBlessings = 0x8e8f465cC81b87efE6C58Efb1A03Ff10c32bBf2d;
    address public liquidityWallet = 0x6a28ae01Ad12bC73D0c70E88D23CeEd6d6382D19;
    address public rewardsWallet = 0xF27d595F962ed722F39889B23682B39F712B4Da8;
    address public treasuryGrowth = 0xed9b43bED20B063ae0966C0AEC446bc755fB84bA;

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event GameRewardPaid(address indexed player, uint256 amount, string gameType);

    constructor() {
        owner = msg.sender;
        balanceOf[owner] = totalSupply;
        emit Transfer(address(0), owner, totalSupply);
    }

    function transfer(address to, uint256 value) public returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient");
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(balanceOf[from] >= value, "Insufficient");
        require(allowance[from][msg.sender] >= value, "Not allowed");
        balanceOf[from] -= value;
        allowance[from][msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(from, to, value);
        return true;
    }

    function payoutGameReward(address player, uint256 amount, string memory gameType) external onlyOwner {
        require(balanceOf[owner] >= amount, "Not enough tokens");
        balanceOf[owner] -= amount;
        balanceOf[player] += amount;
        emit Transfer(owner, player, amount);
        emit GameRewardPaid(player, amount, gameType);
    }

    function manualDistribute(uint256 blessings, uint256 liquidity, uint256 rewards, uint256 growth) external onlyOwner {
        _internalTransfer(owner, bestowedBlessings, blessings);
        _internalTransfer(owner, liquidityWallet, liquidity);
        _internalTransfer(owner, rewardsWallet, rewards);
        _internalTransfer(owner, treasuryGrowth, growth);
    }

    function _internalTransfer(address from, address to, uint256 amount) internal {
        require(balanceOf[from] >= amount, "Not enough");
        balanceOf[from] -= amount;
        balanceOf[to] += amount;
        emit Transfer(from, to, amount);
    }
}
